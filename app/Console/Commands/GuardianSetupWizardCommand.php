<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;

class GuardianSetupWizardCommand extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'guardian:setup {--mode= : Setup mode (test|production|interactive)}';

    /**
     * The console command description.
     */
    protected $description = 'Guardian System Setup Wizard - First time configuration';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->displayWelcome();

        // Verificar se j√° foi configurado
        if ($this->isAlreadySetup() && !$this->option('mode')) {
            $this->warn('‚ö†Ô∏è  Sistema j√° foi configurado anteriormente.');
            
            if (!$this->confirm('Deseja reconfigurar o sistema? (isso ir√° resetar todos os dados)')) {
                $this->info('Configura√ß√£o cancelada.');
                return 0;
            }
        }

        $mode = $this->option('mode') ?: $this->selectSetupMode();

        switch ($mode) {
            case 'test':
                return $this->setupTestMode();
            case 'production':
                return $this->setupProductionMode();
            case 'interactive':
            default:
                return $this->setupInteractiveMode();
        }
    }

    private function displayWelcome()
    {
        $this->info('');
        $this->info('üõ°Ô∏è  ==========================================');
        $this->info('    GUARDIAN PROJECT MANAGEMENT SYSTEM');
        $this->info('    Assistente de Configura√ß√£o Inicial');
        $this->info('==========================================');
        $this->info('');
    }

    private function isAlreadySetup(): bool
    {
        try {
            return DB::table('users')->count() > 0 || 
                   File::exists(storage_path('app/guardian_setup_complete.flag'));
        } catch (\Exception $e) {
            return false;
        }
    }

    private function selectSetupMode(): string
    {
        $this->info('Por favor, selecione o modo de configura√ß√£o:');
        $this->info('');
        
        $choice = $this->choice(
            'Qual √© o seu objetivo?',
            [
                'test' => 'üß™ Modo Teste - MVP com dados de exemplo (recomendado para demonstra√ß√£o)',
                'production' => 'üöÄ Modo Produ√ß√£o - Sistema completo para uso real',
                'interactive' => '‚öôÔ∏è  Modo Interativo - Configura√ß√£o personalizada passo a passo'
            ],
            'test'
        );

        return $choice;
    }

    private function setupTestMode(): int
    {
        $this->info('');
        $this->info('üß™ Configurando Guardian em Modo Teste...');
        $this->info('');

        // Preparar banco
        $this->info('üìã Preparando banco de dados...');
        Artisan::call('migrate:fresh', ['--force' => true]);

        // Dados de teste
        $this->info('üå± Criando dados de demonstra√ß√£o...');
        Artisan::call('db:seed', ['--force' => true]);

        // Configura√ß√µes otimizadas para teste
        $this->setupTestEnvironment();

        $this->markSetupComplete('test');
        $this->displayTestModeSuccess();

        return 0;
    }

    private function setupProductionMode(): int
    {
        $this->info('');
        $this->info('üöÄ Configurando Guardian em Modo Produ√ß√£o...');
        $this->info('');

        // Valida√ß√µes de seguran√ßa
        if (!$this->validateProductionRequirements()) {
            return 1;
        }

        // Configurar banco
        $this->info('üìã Configurando banco de dados...');
        Artisan::call('migrate', ['--force' => true]);

        // Criar usu√°rio administrador
        $this->createAdminUser();

        // Configura√ß√µes de produ√ß√£o
        $this->setupProductionEnvironment();

        $this->markSetupComplete('production');
        $this->displayProductionModeSuccess();

        return 0;
    }

    private function setupInteractiveMode(): int
    {
        $this->info('');
        $this->info('‚öôÔ∏è  Configura√ß√£o Interativa do Guardian...');
        $this->info('');

        // Perguntas de configura√ß√£o
        $includeTestData = $this->confirm('Incluir dados de exemplo/demonstra√ß√£o?', true);
        $setupSecurity = $this->confirm('Configurar recursos de seguran√ßa avan√ßados?', false);
        $enableAudit = $this->confirm('Habilitar auditoria completa?', true);

        // Configurar banco
        $this->info('üìã Configurando banco de dados...');
        if ($includeTestData) {
            Artisan::call('migrate:fresh', ['--force' => true]);
            Artisan::call('db:seed', ['--force' => true]);
        } else {
            Artisan::call('migrate', ['--force' => true]);
            $this->createAdminUser();
        }

        // Configura√ß√µes espec√≠ficas
        if ($setupSecurity) {
            $this->setupSecurityFeatures();
        }

        if ($enableAudit) {
            $this->setupAuditFeatures();
        }

        $this->markSetupComplete('interactive');
        $this->displayInteractiveModeSuccess($includeTestData);

        return 0;
    }

    private function validateProductionRequirements(): bool
    {
        $this->info('üîç Validando requisitos de produ√ß√£o...');

        $errors = [];

        // Verificar ambiente
        if (env('APP_ENV') === 'local') {
            $errors[] = 'APP_ENV deve ser definido como "production"';
        }

        // Verificar chave da aplica√ß√£o
        if (!env('APP_KEY')) {
            $errors[] = 'APP_KEY n√£o est√° definida';
        }

        // Verificar configura√ß√µes de banco
        if (!env('DB_PASSWORD') || env('DB_PASSWORD') === 'password') {
            $errors[] = 'DB_PASSWORD deve ser uma senha segura';
        }

        if (!empty($errors)) {
            $this->error('‚ùå Problemas encontrados:');
            foreach ($errors as $error) {
                $this->error("   - $error");
            }
            $this->info('');
            $this->info('Por favor, corrija essas configura√ß√µes no arquivo .env antes de continuar.');
            return false;
        }

        return true;
    }

    private function createAdminUser(): void
    {
        $this->info('üë§ Criando usu√°rio administrador...');

        $name = $this->ask('Nome do administrador', 'Administrador');
        $email = $this->ask('Email do administrador', 'admin@empresa.com');
        
        do {
            $password = $this->secret('Senha do administrador (m√≠nimo 8 caracteres)');
            if (strlen($password) < 8) {
                $this->error('Senha deve ter pelo menos 8 caracteres.');
            }
        } while (strlen($password) < 8);

        \App\Models\User::create([
            'name' => $name,
            'email' => $email,
            'password' => \Illuminate\Support\Facades\Hash::make($password),
            'role' => 'super_admin',
            'is_active' => true,
            'email_verified_at' => now(),
        ]);

        $this->info("‚úÖ Usu√°rio administrador criado: $email");
    }

    private function setupTestEnvironment(): void
    {
        $this->info('‚öôÔ∏è  Configurando ambiente de teste...');
        
        // Configura√ß√µes espec√≠ficas para teste
        file_put_contents(
            storage_path('app/guardian_config.json'),
            json_encode([
                'mode' => 'test',
                'features' => [
                    'demo_data' => true,
                    'security_relaxed' => true,
                    'audit_minimal' => true,
                ],
                'setup_date' => now()->toISOString(),
            ], JSON_PRETTY_PRINT)
        );
    }

    private function setupProductionEnvironment(): void
    {
        $this->info('‚öôÔ∏è  Configurando ambiente de produ√ß√£o...');
        
        file_put_contents(
            storage_path('app/guardian_config.json'),
            json_encode([
                'mode' => 'production',
                'features' => [
                    'demo_data' => false,
                    'security_enhanced' => true,
                    'audit_complete' => true,
                ],
                'setup_date' => now()->toISOString(),
            ], JSON_PRETTY_PRINT)
        );

        // Otimiza√ß√µes de produ√ß√£o
        Artisan::call('config:cache');
        Artisan::call('route:cache');
        Artisan::call('view:cache');
    }

    private function setupSecurityFeatures(): void
    {
        $this->info('üîê Configurando recursos de seguran√ßa...');
        // Implementar configura√ß√µes de seguran√ßa avan√ßadas
    }

    private function setupAuditFeatures(): void
    {
        $this->info('üìä Configurando auditoria...');
        // Implementar configura√ß√µes de auditoria
    }

    private function markSetupComplete(string $mode): void
    {
        File::put(
            storage_path('app/guardian_setup_complete.flag'),
            json_encode([
                'mode' => $mode,
                'completed_at' => now()->toISOString(),
                'version' => '1.0-MVP'
            ])
        );
    }

    private function displayTestModeSuccess(): void
    {
        $this->info('');
        $this->info('‚úÖ Guardian configurado em Modo Teste com sucesso!');
        $this->info('');
        $this->info('üåê Acesso: http://localhost:8000');
        $this->info('üìß MailHog: http://localhost:8025');
        $this->info('');
        $this->info('üë• Usu√°rios de teste (senha: guardian123):');
        $this->table(
            ['Email', 'Fun√ß√£o'],
            [
                ['admin@guardian.local', 'Super Admin'],
                ['joao@guardian.local', 'Gerente de Projetos'],
                ['maria@guardian.local', 'L√≠der de Equipe'],
                ['pedro@guardian.local', 'Desenvolvedor'],
                ['ana@guardian.local', 'Desenvolvedora'],
            ]
        );
        $this->info('');
        $this->info('üéØ O sistema inclui projetos e tarefas de exemplo!');
        $this->info('üìñ Consulte o arquivo TESTE-MVP.md para roteiro completo de testes.');
    }

    private function displayProductionModeSuccess(): void
    {
        $this->info('');
        $this->info('‚úÖ Guardian configurado em Modo Produ√ß√£o com sucesso!');
        $this->info('');
        $this->info('üöÄ Sistema pronto para uso em produ√ß√£o.');
        $this->info('üîê Recursos de seguran√ßa ativados.');
        $this->info('üìä Auditoria completa habilitada.');
        $this->info('');
        $this->info('‚ö†Ô∏è  Lembre-se de:');
        $this->info('   - Configurar backup regular do banco de dados');
        $this->info('   - Revisar configura√ß√µes de seguran√ßa');
        $this->info('   - Monitorar logs do sistema');
    }

    private function displayInteractiveModeSuccess(bool $hasTestData): void
    {
        $this->info('');
        $this->info('‚úÖ Guardian configurado com sucesso!');
        $this->info('');
        
        if ($hasTestData) {
            $this->info('üéØ Sistema configurado com dados de exemplo.');
            $this->info('üë• Use os usu√°rios de teste para experimentar o sistema.');
        } else {
            $this->info('üöÄ Sistema configurado para uso real.');
            $this->info('üë§ Use o usu√°rio administrador criado para come√ßar.');
        }
        
        $this->info('');
        $this->info('üåê Acesse: http://localhost:8000');
    }
}
